//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */ 
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.

   HashMap <String,classes> Symboltable=new HashMap <String,classes>();
   int flag=0;

	 public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      flag=1;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      String name=(String)(n.f1.accept(this,argu));

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);

      if(flag==1) n.f14.accept(this, (A)(Symboltable.get(name).classfuncs.get("main")));
      else n.f14.accept(this, argu);

      n.f15.accept(this, argu);
      n.f16.accept(this, argu);

      if(flag==0)
      {
         classes main=new classes();

         main.name=(String)(n.f1.accept(this,argu));
         main.parent="NULL";

         functions mainfunc=new functions();

         mainfunc.name="main";
         mainfunc.fclass=main.name;
         mainfunc.ret="void";
         mainfunc.nargs=1;
         mainfunc.typenum.put("String[]",1);
         mainfunc.args.put("String[]",(String)(n.f11.accept(this,argu)));

         main.classfuncs.put("main",mainfunc);

         Symboltable.put(main.name,main);
      }

      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */

      String name=(String)(n.f1.accept(this,argu));

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         if(Symboltable.containsKey(name))
         {
            System.out.println("Type error");
            System.exit(0);
         }
         
         classes typedecl=new classes();
         typedecl.name=(String)(n.f1.accept(this,argu));
         typedecl.parent="NULL";

         n.f2.accept(this, argu);
         n.f3.accept(this, (A)(typedecl.classvars));
         n.f4.accept(this, (A)(typedecl));
         n.f5.accept(this, argu);

         Iterator it=typedecl.classvars.entrySet().iterator();
         
         while(it.hasNext())
         {
            Map.Entry mapele=(Map.Entry)it.next();

            if(mapele.getKey().equals(name))
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }

         Iterator it1=typedecl.classfuncs.entrySet().iterator();
         
         while(it1.hasNext())
         {
            Map.Entry mapele1=(Map.Entry)it1.next();

            Iterator it2=((functions)(mapele1.getValue())).funcvars.entrySet().iterator();
         
            while(it2.hasNext())
            {
               Map.Entry mapele2=(Map.Entry)it2.next();

               if(mapele2.getKey().equals(name))
               {
                  System.out.println("Type error");
                  System.exit(0);
               }
            }
         }

         Symboltable.put(name,typedecl);

         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, (A)Symboltable.get(name));
         n.f1.accept(this, (A)Symboltable.get(name));
         n.f2.accept(this, (A)Symboltable.get(name));
         n.f3.accept(this, (A)Symboltable.get(name));
         n.f4.accept(this, (A)Symboltable.get(name));
         n.f5.accept(this, (A)Symboltable.get(name));

         return _ret;
      }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      String name=(String)(n.f1.accept(this,argu));
      String parent=(String)(n.f3.accept(this,argu));

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         if(Symboltable.containsKey(name))
         {
            System.out.println("Type error");
            System.exit(0);
         }
         
         classes typedecl=new classes();
         typedecl.name=(String)(n.f1.accept(this,argu));

         n.f2.accept(this, argu);
         n.f3.accept(this, argu);

         typedecl.parent=(String)(n.f3.accept(this,argu));

         if(!Symboltable.containsKey(typedecl.parent) || typedecl.parent==name)
         {
            System.out.println("Type error");
            System.exit(0);
         }

         n.f4.accept(this, argu);
         n.f5.accept(this, (A)(typedecl.classvars));

         Iterator it=Symboltable.get(typedecl.parent).classvars.entrySet().iterator();
         
         while(it.hasNext())
         {
            Map.Entry mapele=(Map.Entry)it.next();

            if(typedecl.classvars.get(mapele.getKey())==null) (typedecl.classvars).put((String)mapele.getKey(),(String)mapele.getValue());
         }

         n.f6.accept(this, (A)(typedecl));
         n.f7.accept(this, argu);

         Iterator it1=Symboltable.get(typedecl.parent).classfuncs.entrySet().iterator();
         
         while(it1.hasNext())
         {
            Map.Entry mapele=(Map.Entry)it1.next();

            if(typedecl.classfuncs.get(mapele.getKey())!=null)
            {
               if(!(((functions)(mapele.getValue())).typenum).equals(typedecl.classfuncs.get(mapele.getKey()).typenum))
               {
                  System.out.println("Type error");
                  System.exit(0);
               }
            }
            else
            {
               typedecl.classfuncs.put((String)mapele.getKey(),(functions)mapele.getValue());
            }
         }

         Iterator it2=typedecl.classfuncs.entrySet().iterator();
         
         while(it2.hasNext())
         {
            Map.Entry mapele2=(Map.Entry)it2.next();

            Iterator it3=((functions)(mapele2.getValue())).funcvars.entrySet().iterator();
         
            while(it3.hasNext())
            {
               Map.Entry mapele3=(Map.Entry)it3.next();

               if(mapele3.getKey().equals(name) || (mapele3.getKey()).equals(parent))
               {
                  System.out.println("Type error");
                  System.exit(0);
               }
            }
         }

         Iterator it4=typedecl.classvars.entrySet().iterator();
         
         while(it4.hasNext())
         {
            Map.Entry mapele=(Map.Entry)it4.next();

            if(mapele.getKey().equals(name) || mapele.getKey().equals(parent))
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }

         Symboltable.put(name,typedecl);

         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, (A)Symboltable.get(name));
         n.f1.accept(this, (A)Symboltable.get(name));
         n.f2.accept(this, (A)Symboltable.get(name));
         n.f3.accept(this, (A)Symboltable.get(name));
         n.f4.accept(this, (A)Symboltable.get(name));
         n.f5.accept(this, (A)Symboltable.get(name));
         n.f6.accept(this, (A)Symboltable.get(name));
         n.f7.accept(this, (A)Symboltable.get(name));

         return _ret;
      }
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      
      if(flag==0)
      {
         String type=(String)(n.f0.accept(this,argu));
         String id=(String)(n.f1.accept(this,argu));

         if(((HashMap <String,String>)(argu)).get(id)!=null)
         {
            System.out.println("Type error");
            System.exit(0);
         }
         ((HashMap <String,String>)(argu)).put(id,type);
      }

      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      String name=(String)(n.f2.accept(this, argu));
      String rettype=(String)(n.f1.accept(this, argu));

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);

         functions func=new functions();
         func.name=name;
         func.fclass=((classes)(argu)).name;
         func.ret=rettype;

         n.f4.accept(this, (A)(func));
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, (A)(func.funcvars));
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);

         if(((classes)(argu)).classfuncs.get(name)!=null || func.fclass==name)
         {
            System.out.println("Type error");
            System.exit(0);
         }

         Iterator it=func.args.entrySet().iterator();
         
         while(it.hasNext())
         {
            Map.Entry mapele=(Map.Entry)it.next();

            if(func.funcvars.get(mapele.getKey())!=null)
            {
               System.out.println("Type error");
               System.exit(0);
            }
            else (func.funcvars).put((String)mapele.getKey(),(String)mapele.getValue());
         }

         Iterator it1=(((classes)(argu)).classvars).entrySet().iterator();
         
         while(it1.hasNext())
         {
            Map.Entry mapele=(Map.Entry)it1.next();

            if(func.funcvars.get(mapele.getKey())==null) (func.funcvars).put((String)mapele.getKey(),(String)mapele.getValue());
         }

         (((classes)(argu)).classfuncs).put(name,func);

         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f1.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f2.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f3.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f4.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f5.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f6.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f7.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f8.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f9.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));

         String r=(String)n.f10.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         if(!r.equals(rettype))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         n.f11.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f12.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         return _ret;
      }
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      if(flag==0)
      {
         String type=(String)(n.f0.accept(this,argu));
         String id=(String)(n.f1.accept(this,argu));

         if(((functions)(argu)).args.get(id)!=null)
         {
            System.out.println("Type error");
            System.exit(0);
         }

         if(((functions)(argu)).typenum.get(id)==null) ((functions)(argu)).typenum.put(id,1);
         else ((functions)(argu)).typenum.put(id,((functions)(argu)).typenum.get(id)+1);

         ((functions)(argu)).args.put(id,type);
      }

      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      String s=(String)n.f0.accept(this, argu);

      if(flag==1 && n.f0.which==3)
      {
         if(Symboltable.get(s)==null)
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      
      _ret=(R)s;

      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      String s=(String)(n.f0.accept(this,argu))+(String)(n.f1.accept(this,argu))+(String)(n.f2.accept(this,argu));
      _ret=(R)s;

      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret=n.f0.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret=n.f0.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String id=(String)n.f0.accept(this, argu);

         if(((functions)(argu)).funcvars.get(id)==null)
         {
            System.out.println("Type error");
            System.exit(0);
         }

         n.f1.accept(this, argu);

         String expr=(String)n.f2.accept(this, argu);

         n.f3.accept(this, argu);

         while(!(((functions)(argu)).funcvars.get(id).equals(expr)))
         {
            if(expr==null || expr.equals("NULL") || Symboltable.get(expr)==null)
            {
               System.out.println("Type error");
               System.exit(0);
            }
            expr=(Symboltable.get(expr).parent);
         }
         return _ret;
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      if(flag==1)
      {
         R _ret=null;

         String id=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String expr1=(String)n.f2.accept(this, argu);

         n.f3.accept(this, argu);
         n.f4.accept(this, argu);

         String expr2=(String)n.f5.accept(this, argu);

         n.f6.accept(this, argu);

         if(((functions)(argu)).funcvars.get(id)==null || !(((functions)(argu)).funcvars.get(id).equals("int[]")) || !(expr1.equals("int")) || !(expr2.equals("int")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         String expr=(String)n.f2.accept(this, argu);
         if(!(expr.equals("boolean")))
         {
            System.out.println("Type error");
            System.exit(0);
         } 

         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      if(flag==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         String expr=(String)n.f2.accept(this, argu);
         if(!(expr.equals("boolean")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         String expr=(String)n.f2.accept(this, argu);
         if(!(expr.equals("boolean")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         String expr=(String)n.f2.accept(this, argu);

         if(expr==null || !(expr.equals("int")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(!(p1.equals("boolean")) || !(p2.equals("boolean")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         _ret=(R)("boolean");

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(!(p1.equals("boolean")) || !(p2.equals("boolean")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         _ret=(R)("boolean");

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(!(p1.equals("int")) || !(p2.equals("int")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         _ret=(R)("boolean");

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(!(p1.equals("int")) || !(p2.equals("int")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         _ret=(R)("boolean");

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(!(p1.equals("int")) || !(p2.equals("int")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         _ret=(R)("int");

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(!(p1.equals("int")) || !(p2.equals("int")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         _ret=(R)("int");

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(!(p1.equals("int")) || !(p2.equals("int")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         _ret=(R)("int");

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(!(p1.equals("int")) || !(p2.equals("int")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         _ret=(R)("int");

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         n.f3.accept(this, argu);

         if(!(p1.equals("int[]")) || !(p2.equals("int")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         _ret=(R)("int");

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);
         

         n.f1.accept(this, argu);
         

         if(!(p1.equals("int[]")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         n.f2.accept(this, argu);

         _ret=(R)("int");

         return _ret;
      }
   }

   HashMap <Integer,String> para=new HashMap <Integer,String>();
   functions f=new functions();

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         String p=(String)n.f0.accept(this, argu);

         if(Symboltable.get(p)==null)
         {
            System.out.println("Type error");
            System.exit(0);
         }

         n.f1.accept(this, argu);

         String id=(String)n.f2.accept(this, argu);

         if(Symboltable.get(p).classfuncs.get(id)==null)
         {
            System.out.println("Type error");
            System.exit(0);
         }

         para.clear();

         n.f3.accept(this, argu);
         n.f4.accept(this, argu);

         LinkedHashMap <String,String> mp=Symboltable.get(p).classfuncs.get(id).args;

         if(mp.size()!=para.size())
         {
            System.out.println("Type error");
            System.exit(0);
         }

         Iterator it1=mp.entrySet().iterator();
         Iterator it2=para.entrySet().iterator();
      
         while(it2.hasNext())
         {
            Map.Entry mapele1=(Map.Entry)it1.next();
            Map.Entry mapele2=(Map.Entry)it2.next();

            String expr=(String)mapele2.getValue();

            while(!((mapele1.getValue()).equals(expr)))
            {
               if(expr.equals("NULL") || Symboltable.get(expr)==null)
               {
                  System.out.println("Type error");
                  System.exit(0);
               }
               expr=(Symboltable.get(expr).parent);
            }
         }
         para.clear();

         n.f5.accept(this, argu);

         _ret=(R)(Symboltable.get(p).classfuncs.get(id).ret);

         return _ret;
      }
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         
         String s=(String)n.f0.accept(this,argu);
         para.put(para.size()+1,s);
         
         n.f1.accept(this, argu);

         return _ret;
      }
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);

      String s=(String)n.f1.accept(this,argu);
      para.put(para.size()+1,s);

      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret=n.f0.accept(this, argu);

      if(flag==1 && n.f0.which==3)
      {
         _ret=(R)(((functions)(argu)).funcvars.get((String)_ret));
      }

      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      n.f0.accept(this, argu);

      _ret=(R)("int");

      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);

      _ret=(R)("boolean");

      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);

      _ret=(R)("boolean");

      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);

      _ret=n.f0.accept(this,argu);

      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);

      if(flag==1) _ret=(R)((functions)(argu)).fclass;

      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);

         String expr=(String)n.f3.accept(this, argu);
         if(!(expr.equals("int")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         n.f4.accept(this, argu);

         _ret=(R)("int[]");

         return _ret;
      }
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);

      _ret=n.f1.accept(this, argu);

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);

         String expr=(String)n.f1.accept(this, argu);

         if(!(expr.equals("boolean")))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         _ret=(R)("boolean");

         return _ret;
      }
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);

      _ret=n.f1.accept(this, argu);

      n.f2.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   public class classes
   {
      String name;
      String parent;
      HashMap <String,String> classvars=new HashMap<String,String>();
      HashMap <String,functions> classfuncs=new HashMap<String,functions>();
   }

   public class functions
   {
      String name;
      String fclass;
      String ret;
      int nargs;
      HashMap <String,Integer> typenum=new HashMap<String,Integer>();
      LinkedHashMap <String,String> args=new LinkedHashMap<String,String>();
      HashMap <String,String> funcvars=new HashMap<String,String>();
   }

   public void printclasses(HashMap <String,classes> map)
   {
      Iterator it=map.entrySet().iterator();
      
      while(it.hasNext())
      {
         Map.Entry mapele=(Map.Entry)it.next();

         classes c=(classes)mapele.getValue();
         System.out.println("Class : "+mapele.getKey()+"    "+"Root : "+c.parent);

         printvars(c.classvars);
         printfuncs(c.classfuncs);
      }
   }

   public void printvars(HashMap <String,String> map)
   {
      Iterator it=map.entrySet().iterator();
      
      while(it.hasNext())
      {
         Map.Entry mapele=(Map.Entry)it.next();

         System.out.println("TYPE : "+mapele.getValue()+"    "+"ID : "+mapele.getKey());
      }
   }

   public void printfuncs(HashMap <String,functions> map)
   {
      Iterator it=map.entrySet().iterator();
      
      while(it.hasNext())
      {
         Map.Entry mapele=(Map.Entry)it.next();

         functions c=(functions)mapele.getValue();
         System.out.println("Function : "+mapele.getKey()+"    "+"Return type : "+c.ret);

         printvars(c.funcvars);
      }
   }
}
