//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.awt.Stroke;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   HashMap <String,Integer> funcpars=new HashMap <String,Integer>();  
	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
      {
         String lab=(String) n.node.accept(this,argu);

         if(lab!=null) System.out.println(lab+":");

         return (R)lab;
      }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      funcpars.put("params",(Integer.parseInt((String)n.f2.accept(this, argu))));

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      funcpars.put("stackslots",(Integer.parseInt((String)n.f5.accept(this, argu))));
    
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);

      funcpars.put("maxargs",(Integer.parseInt((String)n.f8.accept(this, argu))));
      
      n.f9.accept(this, argu);

      int t=(funcpars.get("stackslots")+2)*4;

      if(funcpars.get("maxargs")>4) t+=(funcpars.get("maxargs")-4)*4;

      System.out.println("        .text");
      System.out.println("        .globl            main");
      System.out.println("main:");
      System.out.println("        move $fp, $sp");
      System.out.println("        subu $sp, $sp, "+t);
      System.out.println("        sw $ra, -4($fp)");
      
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);

      System.out.println("        lw $ra, -4($fp)");
      System.out.println("        addu $sp, $sp, "+t);
      System.out.println("        j $ra");
      System.out.println();

      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);

      System.out.println("        .text");
      System.out.println("        .globl           _halloc");
      System.out.println("_halloc:");
      System.out.println("        li $v0, 9");
      System.out.println("        syscall");
      System.out.println("        j $ra");
      System.out.println();

      System.out.println("        .text");
      System.out.println("        .globl           _print");
      System.out.println("_print:");
      System.out.println("        li $v0, 1");
      System.out.println("        syscall");
      System.out.println("        la $a0, newl");
      System.out.println("        li $v0, 4");
      System.out.println("        syscall");
      System.out.println("        j $ra");
      System.out.println();

      System.out.println("        .data");
      System.out.println("        .align     0");
      System.out.println("newl:   .asciiz \"\\n\"");
      System.out.println();

      System.out.println("        .data");
      System.out.println("        .align     0");
      System.out.println("str_er: .asciiz \" ERROR: abnormal termination\\n\"");

      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;

      String fname=(String) n.f0.accept(this, argu);

      n.f1.accept(this, argu);

      funcpars.put("params",(Integer.parseInt((String)n.f2.accept(this, argu))));

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      funcpars.put("stackslots",(Integer.parseInt((String)n.f5.accept(this, argu))));
    
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);

      funcpars.put("maxargs",(Integer.parseInt((String)n.f8.accept(this, argu))));
      
      n.f9.accept(this, argu);

      int t=(funcpars.get("stackslots")+2)*4;

      if(funcpars.get("maxargs")>4) t+=(funcpars.get("maxargs")-4)*4;

      System.out.println("        .text");
      System.out.println("        .globl            "+fname);
      System.out.println(fname+":");
      System.out.println("        sw $fp, -8($sp)");
      System.out.println("        move $fp, $sp");
      System.out.println("        subu $sp, $sp, "+t);
      System.out.println("        sw $ra, -4($fp)");
      
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);

      System.out.println("        lw $ra, -4($fp)");
      System.out.println("        lw $fp, "+(t-8)+"($sp)");
      System.out.println("        addu $sp, $sp, "+t);
      System.out.println("        j $ra");
      System.out.println();

      n.f12.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      System.out.println("        nop");

      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      System.out.println("        li $v0 4");
      System.out.println("        la $a0, str_er");
      System.out.println("        syscall");
      System.out.println("        li $v0, 10");
      System.out.println("        syscall");
          
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String reg=(String) n.f1.accept(this, argu);
      String lab=(String) n.f2.accept(this, argu);

      System.out.println("        beqz $"+reg+" "+lab);

      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String lab=(String) n.f1.accept(this, argu);

      System.out.println("        b "+lab);

      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String reg1=(String) n.f1.accept(this, argu);
      String num=(String) n.f2.accept(this, argu);
      String reg2=(String) n.f3.accept(this, argu);

      System.out.println("        sw $"+reg2+", "+num+"($"+reg1+")");
      
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String reg1=(String) n.f1.accept(this, argu);
      String reg2=(String) n.f2.accept(this, argu);
      String num=(String) n.f3.accept(this, argu);

      System.out.println("        lw $"+reg1+", "+num+"($"+reg2+")");
      
      return _ret;
   }

   String reg;

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      reg=(String) n.f1.accept(this, argu);

      n.f2.accept(this, argu);
      return _ret;
   }

   int simexp;

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      n.f1.accept(this, (A)"simple1");

      System.out.println("        jal _print");

      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String reg=(String) n.f1.accept(this, argu);

      System.out.print("        lw $"+reg+",");

      n.f2.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String reg=(String) n.f2.accept(this, argu);

      System.out.print("        sw $"+reg+",");

      n.f1.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String num=(String) n.f1.accept(this, argu);
      String reg=(String) n.f2.accept(this, argu);

      System.out.println("        sw $"+reg+", "+(((Integer.parseInt(num))-1)*4)+"($sp)");
      
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String s=(String) n.f1.accept(this, null);

      if(simexp==0)
      {
         System.out.println("        jalr $"+s);
      }
      else if(simexp==2)
      {
         System.out.println("        jal "+s);
      }
      
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;

      if(n.f0.which==2) n.f0.accept(this, (A)"simple2");
      else n.f0.accept(this, null);

      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String s=(String) n.f1.accept(this, null);

      if(simexp==0)
      {
         System.out.println("        move $a0 $"+s);
      }
      else if(simexp==1)
      {
         System.out.println("        li $a0 "+s);
      }

      System.out.println("        jal _halloc");
      System.out.println("        move $"+reg+" $v0");
      
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;

      String op=(String) n.f0.accept(this, argu);
      String r=(String) n.f1.accept(this, argu);
      String s=(String) n.f2.accept(this, null);

      if(simexp==0)
      {
         System.out.println("        "+op+" $"+reg+", $"+r+", $"+s);
      }
      else if(simexp==1)
      {
         System.out.println("        "+op+" $"+reg+", $"+r+", "+s);
      }
      
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String[] op=new String[]{"sle","sne","add","sub","mul","div"};

      return (R)(op[n.f0.which]);
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String num=(String) n.f1.accept(this, argu);

      int t=0;

      if(funcpars.get("params")>4)
      {
         t=funcpars.get("params")-4;

         if(Integer.parseInt(num)<t)
         {
            System.out.println(" "+((Integer.parseInt(num))*4)+"($fp)");

            return _ret;
         }
      }

      int a=Integer.parseInt(num);

      a-=t;

      if(funcpars.get("maxargs")>4)
      {
         a+=(funcpars.get("maxargs")-4);
      }

      a*=4;

      System.out.println(" "+a+"($sp)");

      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;

      String s=(String) n.f0.accept(this, argu);

      simexp=n.f0.which;

      if((String)argu=="simple1")
      {
         if(simexp==0)
         {
            System.out.println("        move $a0 $"+s);
         }
         else if(simexp==1)
         {
            System.out.println("        li $a0 "+s);
         }
         else
         {
            System.out.println("        la $a0 "+s);
         }
      }

      if((String)argu=="simple2")
      {
         if(simexp==0)
         {
            System.out.println("        move $"+reg+" $"+s);
         }
         else if(simexp==1)
         {
            System.out.println("        li $"+reg+" "+s);
         }
         else
         {
            System.out.println("        la $"+reg+" "+s);
         }
      }
      
      return (R)s;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;

      _ret=n.f0.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
      
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}