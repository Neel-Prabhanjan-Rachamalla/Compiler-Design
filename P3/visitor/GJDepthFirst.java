//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */ 
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.

   LinkedHashMap <String,classes> Symboltable=new LinkedHashMap <String,classes>();
   int flag=0;
   int labels=0;
   String ms;
   String cls;

	 public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      flag=1;
      //printclasses(Symboltable);

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      if(flag==0)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, null);
         
         String name=(String)(n.f1.accept(this,null));

         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, null);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);

         classes main=new classes();

         main.name=(String)(n.f1.accept(this,null));
         main.parent="NULL";

         functions mainfunc=new functions();

         mainfunc.name="main";
         mainfunc.fclass=main.name;
         mainfunc.ret="void";
         mainfunc.nargs=1;
         mainfunc.typenum.put("String[]",1);
         mainfunc.args.put("String[]",(String)(n.f11.accept(this,argu)));

         main.classfuncs.put("main",mainfunc);

         Symboltable.put(main.name,main);
      }
      else
      {
         System.out.println("MAIN");

         n.f0.accept(this, argu);
         n.f1.accept(this, null);
         
         String name=(String)(n.f1.accept(this, null));

         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, null);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);

         n.f14.accept(this, (A)(Symboltable.get(name).classfuncs.get("main")));

         n.f15.accept(this, argu);
         n.f16.accept(this, argu);

         System.out.println("END");
      }

      return _ret;
   }
   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */

      String name=(String)(n.f1.accept(this,null));

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, null);
         
         classes typedecl=new classes();
         typedecl.name=(String)(n.f1.accept(this, null));
         typedecl.parent="NULL";

         n.f2.accept(this, argu);
         n.f3.accept(this, (A)(typedecl.classvars));
         n.f4.accept(this, (A)(typedecl));
         n.f5.accept(this, argu);

         Iterator it=typedecl.classvars.entrySet().iterator();
         int temp1=0;

         while(it.hasNext())
         {
            Map.Entry mapele=(Map.Entry)it.next();

            typedecl.classvarstemps.put((String)mapele.getKey(),temp1++);
         }

         Iterator it1=typedecl.classfuncs.entrySet().iterator();
         int temp2=0;
         
         while(it1.hasNext())
         {
            Map.Entry mapele1=(Map.Entry)it1.next();

            typedecl.classfuncstemps.put((String)mapele1.getKey(),temp2++);
         }

         Symboltable.put(name,typedecl);

         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, (A)Symboltable.get(name));
         n.f1.accept(this, null);
         n.f2.accept(this, (A)Symboltable.get(name));
         n.f3.accept(this, (A)Symboltable.get(name));
         n.f4.accept(this, (A)Symboltable.get(name));
         n.f5.accept(this, (A)Symboltable.get(name));

         return _ret;
      }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      String name=(String)(n.f1.accept(this,null));
      String parent=(String)(n.f3.accept(this,null));

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, null);
         
         classes typedecl=new classes();
         typedecl.name=(String)(n.f1.accept(this, null));

         n.f2.accept(this, argu);
         n.f3.accept(this, null);

         typedecl.parent=(String)(n.f3.accept(this, null));

         n.f4.accept(this, argu);

         Iterator it=Symboltable.get(typedecl.parent).classvars.entrySet().iterator();
         
         while(it.hasNext())
         {
            Map.Entry mapele=(Map.Entry)it.next();

            if(typedecl.classvars.get(mapele.getKey())==null) (typedecl.classvars).put((String)mapele.getKey(),(String)mapele.getValue());
         }

         n.f5.accept(this, (A)(typedecl.classvars));
         n.f6.accept(this, (A)(typedecl));
         n.f7.accept(this, argu);

         Iterator it1=Symboltable.get(typedecl.parent).classfuncs.entrySet().iterator();
         
         while(it1.hasNext())
         {
            Map.Entry mapele=(Map.Entry)it1.next();

            if(typedecl.classfuncs.get(mapele.getKey())!=null)
            {
               
            }
            else
            {
               typedecl.classfuncs.put((String)mapele.getKey(),(functions)mapele.getValue());
            }
         }

         Iterator it2=typedecl.classfuncs.entrySet().iterator();
         int temp2=0;
         
         while(it2.hasNext())
         {
            Map.Entry mapele2=(Map.Entry)it2.next();

            typedecl.classfuncstemps.put((String)mapele2.getKey(),temp2++);
         }

         Iterator it4=typedecl.classvars.entrySet().iterator();
         int temp1=0;
         
         while(it4.hasNext())
         {
            Map.Entry mapele=(Map.Entry)it4.next();

            typedecl.classvarstemps.put((String)mapele.getKey(),temp1++);
         }

         Symboltable.put(name,typedecl);

         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, (A)Symboltable.get(name));
         n.f1.accept(this, null);
         n.f2.accept(this, (A)Symboltable.get(name));
         n.f3.accept(this, null);
         n.f4.accept(this, (A)Symboltable.get(name));
         n.f5.accept(this, (A)Symboltable.get(name));
         n.f6.accept(this, (A)Symboltable.get(name));
         n.f7.accept(this, (A)Symboltable.get(name));

         return _ret;
      }
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, null);
      n.f2.accept(this, argu);

      
      if(flag==0)
      {
         String type=(String)(n.f0.accept(this,argu));
         String id=(String)(n.f1.accept(this, null));

         ((LinkedHashMap <String,String>)(argu)).put(id,type);
      }

      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      String name=(String)(n.f2.accept(this, null));
      String rettype=(String)(n.f1.accept(this, argu));

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, null);
         n.f3.accept(this, argu);

         functions func=new functions();
         func.name=name;
         func.fclass=((classes)(argu)).name;
         func.ret=rettype;

         n.f4.accept(this, (A)(func));
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, (A)(func.funcvars));
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);

         func.nargs=func.args.size();

         Iterator it0=func.funcvars.entrySet().iterator();
         int temp=func.nargs+1;
         func.invars=func.funcvars.size();
         
         while(it0.hasNext())
         {
            Map.Entry mapele0=(Map.Entry)it0.next();

            (func.funcvarstemps).put((String)mapele0.getKey(),temp++);
         }
         func.temp=temp;

         Iterator it=func.args.entrySet().iterator();
         int temp2=1;

         while(it.hasNext())
         {
            Map.Entry mapele=(Map.Entry)it.next();

            if(func.funcvars.get(mapele.getKey())!=null)
            {
               
            }
            else (func.funcvars).put((String)mapele.getKey(),(String)mapele.getValue());

            func.argstemps.put((String)mapele.getKey(),temp2++);
         }

         Iterator it1=(((classes)(argu)).classvars).entrySet().iterator();
         
         while(it1.hasNext())
         {
            Map.Entry mapele=(Map.Entry)it1.next();

            if(func.funcvars.get(mapele.getKey())==null) (func.funcvars).put((String)mapele.getKey(),(String)mapele.getValue());
         }

         (((classes)(argu)).classfuncs).put(name,func);

         return _ret;
      }
      else
      {
         int args=(((classes)(argu)).classfuncs.get(name).nargs);
         int a=(((classes)(argu)).classfuncs.get(name).invars);
         System.out.println(((classes)(argu)).name+"_"+name+" ["+(args+1)+"]");
         System.out.println("BEGIN");

         /*int t=(((classes)(argu)).classfuncs.get(name).temp);
         int l=labels;
         int p=t;
         int z=t+1;
         System.out.println("MOVE TEMP "+(t++)+" "+(args+1));
         System.out.println("MOVE TEMP "+(t++)+" 0");
         System.out.println("L"+(labels++));
         System.out.println("MOVE TEMP "+(t++)+" "+(args+a));
         System.out.println("MOVE TEMP "+(t++)+" LE TEMP "+p+" TEMP "+(t-2));
         System.out.println("CJUMP TEMP "+(t-1)+" L"+labels);
         System.out.println("HSTORE TEMP "+p+" 0 TEMP "+z);
         System.out.println("MOVE TEMP "+(t++)+" 1");
         System.out.println("MOVE TEMP "+(t++)+" PLUS TEMP "+p+" TEMP "+(t-2));
         System.out.println("MOVE TEMP "+p+" TEMP "+(t-1));
         System.out.println("JUMP L"+l);
         System.out.println("L"+(labels++));

         ((classes)(argu)).classfuncs.get(name).temp=t;*/

         R _ret=null;
         n.f0.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f1.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f2.accept(this, null);
         n.f3.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f4.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f5.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f6.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f7.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f8.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f9.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));

         String r=(String)n.f10.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));

         n.f11.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         n.f12.accept(this, (A)(((classes)(argu)).classfuncs.get(name)));
         
         System.out.println("RETURN TEMP "+r);

         System.out.println("END");
         
         return _ret;
      }
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, null);

      if(flag==0)
      {
         String type=(String)(n.f0.accept(this,argu));
         String id=(String)(n.f1.accept(this, null));

         if(((functions)(argu)).typenum.get(id)==null) ((functions)(argu)).typenum.put(id,1);
         else ((functions)(argu)).typenum.put(id,((functions)(argu)).typenum.get(id)+1);

         ((functions)(argu)).args.put(id,type);
      }

      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      String s=(String)n.f0.accept(this, null);
      
      _ret=(R)s;

      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      String s=(String)(n.f0.accept(this,argu))+(String)(n.f1.accept(this,argu))+(String)(n.f2.accept(this,argu));
      _ret=(R)s;

      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret=n.f0.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret=n.f0.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, null);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String id=(String)n.f0.accept(this, argu);
         cls=id;

         n.f1.accept(this, argu);

         String expr=(String)n.f2.accept(this, argu);

         n.f3.accept(this, argu);

         if(id.charAt(0)=='T') System.out.println("HSTORE "+id+" TEMP "+expr);
         else System.out.println("MOVE TEMP "+id+" TEMP "+expr);

         return _ret;
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      if(flag==1)
      {
         R _ret=null;

         String id=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String expr1=(String)n.f2.accept(this, argu);

         n.f3.accept(this, argu);
         n.f4.accept(this, argu);

         String expr2=(String)n.f5.accept(this, argu);

         n.f6.accept(this, argu);

         if(id.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+id);
            id=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }

         int t=((functions)(argu)).temp;
         System.out.println("HLOAD TEMP "+(t++)+" TEMP "+id+" 0");
         System.out.println("MOVE TEMP "+(t++)+" 1");
         System.out.println("MOVE TEMP "+(t++)+" MINUS TEMP "+(t-3)+" TEMP "+(t-2));

         System.out.println("MOVE TEMP "+(t++)+" LE TEMP "+expr1+" TEMP "+(t-2));
         System.out.println("MOVE TEMP "+(t++)+" MINUS TEMP "+(t-4)+" TEMP "+(t-2));
         System.out.println("CJUMP TEMP "+(t-1)+" L"+labels);
         System.out.println("ERROR");
         System.out.println("L"+(labels++));

         System.out.println("MOVE TEMP "+(t++)+" 4");
         System.out.println("MOVE TEMP "+(t++)+" TIMES TEMP "+expr1+" TEMP "+(t-2));
         System.out.println("MOVE TEMP "+(t++)+" PLUS TEMP "+(t-2)+" TEMP "+(t-3));

         System.out.println("MOVE TEMP "+(t++)+" PLUS TEMP "+id+" TEMP "+(t-2));
         System.out.println("HSTORE TEMP "+(t-1)+" 0"+" TEMP "+expr2);

         ((functions)(argu)).temp=t;

         String v=Integer.toString(t-1);
         _ret=(R)v;

         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, null);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         String expr=(String)n.f2.accept(this, argu);

         int l=labels;
         System.out.println("CJUMP TEMP "+expr+" L"+(labels++));

         n.f3.accept(this, argu);
         n.f4.accept(this, argu);

         System.out.println("L"+l);
         System.out.println("NOOP");

         return _ret;
      }
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      if(flag==1)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         String expr=(String)n.f2.accept(this, argu);

         int l=labels;
         System.out.println("CJUMP TEMP "+expr+" L"+(labels++));

         n.f3.accept(this, argu);
         n.f4.accept(this, argu);

         System.out.println("JUMP L"+labels);
         System.out.println("L"+l);
         l=labels++;

         n.f5.accept(this, argu);
         n.f6.accept(this, argu);

         System.out.println("L"+l);
         System.out.println("NOOP");

         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         int l1=labels;
         System.out.println("L"+(labels++));

         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         String expr=(String)n.f2.accept(this, argu);

         int l=labels;
         System.out.println("CJUMP TEMP "+expr+" L"+(labels++));

         n.f3.accept(this, argu);
         n.f4.accept(this, argu);

         System.out.println("JUMP L"+l1);
         System.out.println("L"+l);
         System.out.println("NOOP");

         return _ret;
      }
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         String expr=(String)n.f2.accept(this, argu);

         System.out.println("PRINT TEMP "+expr);

         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(p1.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }
         if(p2.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }

         int t=((functions)(argu)).temp;
         System.out.println("MOVE TEMP "+(t++)+" TIMES TEMP "+p1+" TEMP "+p2);

         ((functions)(argu)).temp=t;

         String v=Integer.toString(t-1);
         _ret=(R)v;

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(p1.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }
         if(p2.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }

         int t=((functions)(argu)).temp;
         System.out.println("MOVE TEMP "+(t++)+" 1");
         System.out.println("MOVE TEMP "+(t++)+" MINUS TEMP "+(t-2)+" TEMP "+p1);
         System.out.println("MOVE TEMP "+(t++)+" MINUS TEMP "+(t-3)+" TEMP "+p2);
         System.out.println("MOVE TEMP "+(t++)+" TIMES TEMP "+(t-3)+" TEMP "+(t-2));
         System.out.println("MOVE TEMP "+(t++)+" MINUS TEMP "+(t-5)+" TEMP "+(t-2));

         ((functions)(argu)).temp=t;

         String v=Integer.toString(t-1);
         _ret=(R)v;

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(p1.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }
         if(p2.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }

         int t=((functions)(argu)).temp;
         System.out.println("MOVE TEMP "+(t++)+" LE TEMP "+p1+" TEMP "+p2);

         ((functions)(argu)).temp=t;

         String v=Integer.toString(t-1);
         _ret=(R)v;

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(p1.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }
         if(p2.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }

         int t=((functions)(argu)).temp;
         System.out.println("MOVE TEMP "+(t++)+" NE TEMP "+p1+" TEMP "+p2);

         ((functions)(argu)).temp=t;

         String v=Integer.toString(t-1);
         _ret=(R)v;

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(p1.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }
         if(p2.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }

         int t=((functions)(argu)).temp;
         System.out.println("MOVE TEMP "+(t++)+" PLUS TEMP "+p1+" TEMP "+p2);

         ((functions)(argu)).temp=t;

         String v=Integer.toString(t-1);
         _ret=(R)v;

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(p1.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }
         if(p2.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }

         int t=((functions)(argu)).temp;
         System.out.println("MOVE TEMP "+(t++)+" MINUS TEMP "+p1+" TEMP "+p2);

         ((functions)(argu)).temp=t;

         String v=Integer.toString(t-1);
         _ret=(R)v;

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(p1.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }
         if(p2.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }

         int t=((functions)(argu)).temp;
         System.out.println("MOVE TEMP "+(t++)+" TIMES TEMP "+p1+" TEMP "+p2);

         ((functions)(argu)).temp=t;

         String v=Integer.toString(t-1);
         _ret=(R)v;

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         if(p1.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }
         if(p2.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }

         int t=((functions)(argu)).temp;
         System.out.println("MOVE TEMP "+(t++)+" DIV TEMP "+p1+" TEMP "+p2);

         ((functions)(argu)).temp=t;

         String v=Integer.toString(t-1);
         _ret=(R)v;

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String p2=(String)n.f2.accept(this, argu);

         n.f3.accept(this, argu);

         if(p1.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }
         if(p2.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }

         int t=((functions)(argu)).temp;
         System.out.println("HLOAD TEMP "+(t++)+" TEMP "+p1+" 0");
         System.out.println("MOVE TEMP "+(t++)+" 1");
         System.out.println("MOVE TEMP "+(t++)+" MINUS TEMP "+(t-3)+" TEMP "+(t-2));

         System.out.println("MOVE TEMP "+(t++)+" LE TEMP "+p2+" TEMP "+(t-2));
         System.out.println("MOVE TEMP "+(t++)+" MINUS TEMP "+(t-4)+" TEMP "+(t-2));
         System.out.println("CJUMP TEMP "+(t-1)+" L"+labels);
         System.out.println("ERROR");
         System.out.println("L"+(labels++));

         System.out.println("MOVE TEMP "+(t++)+" 4");
         System.out.println("MOVE TEMP "+(t++)+" TIMES TEMP "+p2+" TEMP "+(t-2));
         System.out.println("MOVE TEMP "+(t++)+" PLUS TEMP "+(t-2)+" TEMP "+(t-3));

         System.out.println("MOVE TEMP "+(t++)+" PLUS TEMP "+p1+" TEMP "+(t-2));
         System.out.println("HLOAD TEMP "+(t++)+" TEMP "+(t-2)+" 0");
         System.out.println("MOVE TEMP "+(t++)+" TEMP "+(t-2));

         ((functions)(argu)).temp=t;

         String v=Integer.toString(t-1);
         _ret=(R)v;

         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;

         String p1=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         n.f2.accept(this, argu);

         if(p1.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;
         }

         int t=((functions)(argu)).temp;

         System.out.println("HLOAD TEMP "+(t++)+" TEMP "+p1+" 0");

         String v=Integer.toString(t-1);
         _ret=(R)v;

         ((functions)(argu)).temp=t;

         return _ret;
      }
   }

   LinkedHashMap <Integer,String> para=new LinkedHashMap <Integer,String>();
   functions f=new functions();

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, null);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         String p=(String)n.f0.accept(this, argu);

         n.f1.accept(this, argu);

         String b=(String)n.f2.accept(this, null);

         int id=Symboltable.get(ms).classfuncstemps.get(b);

         int t=((functions)(argu)).temp;
         System.out.println("MOVE TEMP "+(t++)+" TEMP "+p);
         System.out.println("HLOAD TEMP "+(t++)+" TEMP "+(t-2)+" 0");
         System.out.println("HLOAD TEMP "+(t++)+" TEMP "+(t-2)+" "+id*4);

         ((functions)(argu)).temp=t;
         int base=t-3;
         int fun=t-1;

         para.clear();

         n.f3.accept(this, argu);
         n.f4.accept(this, argu);

         int t1=((functions)(argu)).temp;
         System.out.print("MOVE TEMP "+(t1++)+" CALL TEMP "+fun+" ( TEMP "+base+" ");
         Iterator it2=para.entrySet().iterator();
      
         while(it2.hasNext())
         {
            Map.Entry mapele2=(Map.Entry)it2.next();

            String expr=(String)mapele2.getValue();

            System.out.print("TEMP "+expr+" ");
         }
         System.out.println(")");

         ((functions)(argu)).temp=t1;

         para.clear();

         n.f5.accept(this, argu);

         String v=Integer.toString(t1-1);
         _ret=(R)v;

         return _ret;
      }
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         
         String s=(String)n.f0.accept(this,argu);
         para.put(para.size()+1,s);
         
         n.f1.accept(this, argu);

         return _ret;
      }
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);

      String s=(String)n.f1.accept(this,argu);
      para.put(para.size()+1,s);

      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret=n.f0.accept(this, argu);
      String m=(String)(n.f0.accept(this, null));
      String p1=(String)_ret;

      if(flag==1 && n.f0.which==3)
      {
         ms=(((functions)(argu)).funcvars.get(m));
         
         if(p1.charAt(0)=='T')
         {
            int t=((functions)(argu)).temp;

            System.out.println("HLOAD TEMP "+(t++)+" "+p1);
            p1=Integer.toString(t-1);

            ((functions)(argu)).temp=t;

            _ret=(R)p1;
         }
      }

      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      if(argu==null) return _ret;

      n.f0.accept(this, argu);

      if(flag==1)
      {
         String s=(String)n.f0.accept(this, argu);

         int t=((functions)(argu)).temp;

         System.out.println("MOVE TEMP "+(t++)+" "+s);
         System.out.println("MOVE TEMP "+(t++)+" TEMP "+(t-2));
         ((functions)(argu)).temp=t;

         String v=Integer.toString(t-1);
         _ret=(R)v;
      }

      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      if(argu==null) return _ret;

      n.f0.accept(this, argu);

      if(flag==1)
      {
         String s=(String)n.f0.accept(this, argu);

         int t=((functions)(argu)).temp;
         System.out.println("MOVE TEMP "+(t++)+" "+1);
         System.out.println("MOVE TEMP "+(t++)+" TEMP "+(t-2));
         ((functions)(argu)).temp=t;

         String v=Integer.toString(t-1);
         _ret=(R)v;
      }

      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      if(argu==null) return _ret;

      n.f0.accept(this, argu);

      if(flag==1)
      {
         String s=(String)n.f0.accept(this, argu);

         int t=((functions)(argu)).temp;
         System.out.println("MOVE TEMP "+(t++)+" "+0);
         System.out.println("MOVE TEMP "+(t++)+" TEMP "+(t-2));
         ((functions)(argu)).temp=t;

         String v=Integer.toString(t-1);
         _ret=(R)v;
      }

      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String s=(String)n.f0.accept(this, argu);

      if(flag==1 && argu!=null)
      {
         classes c=Symboltable.get(((functions)(argu)).fclass);

         if(c.classvarstemps.get(s)!=null)
         {
            int a=c.classvarstemps.get(s)+1;
            String v="TEMP 0 "+Integer.toString(4*a);
            _ret=(R)v;
         }
         else if(c.classfuncstemps.get(s)!=null)
         {
            int a=c.classfuncstemps.get(s)+1;
            String v=Integer.toString(4*a);
            _ret=(R)v;
         }
         else if(((functions)(argu)).argstemps.get(s)!=null)
         {
            String v=Integer.toString(((functions)(argu)).argstemps.get(s));
            _ret=(R)v;
         }
         else if(((functions)(argu)).funcvarstemps.get(s)!=null)
         {
            String v=Integer.toString(((functions)(argu)).funcvarstemps.get(s));
            _ret=(R)v;
         }
      }
      else _ret=(R)s;

      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      if(argu==null) return _ret;

      n.f0.accept(this, argu);

      if(flag==1)
      {
         ms=((functions)(argu)).fclass;
         _ret=(R)("0");
      }

      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      if(argu==null)
      {
         R _ret=null;
         return _ret;
      }

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);

         String expr=(String)n.f3.accept(this, argu);

         int t=((functions)(argu)).temp;
         System.out.println("MOVE TEMP "+(t++)+" "+1);
         System.out.println("MOVE TEMP "+(t++)+" TEMP "+expr);
         System.out.println("MOVE TEMP "+(t++)+" PLUS  TEMP "+(t-2)+" TEMP "+(t-3));
         System.out.println("MOVE TEMP "+(t++)+" 4");
         System.out.println("MOVE TEMP "+(t++)+" TIMES TEMP "+(t-3)+" TEMP "+(t-2));
         int v=Hallocate(t,-1,t-1);
         t+=3;

         System.out.println("HSTORE TEMP "+v+" 0 TEMP "+expr);

         int l=labels;
         int p=t;
         int z=t+1;
         System.out.println("MOVE TEMP "+(t++)+" 4");
         System.out.println("MOVE TEMP "+(t++)+" 0");
         System.out.println("L"+(labels++));
         System.out.println("MOVE TEMP "+(t++)+" 1");
         System.out.println("MOVE TEMP "+(t++)+" PLUS TEMP "+expr+" TEMP "+(t-2));
         System.out.println("MOVE TEMP "+(t++)+" 4");
         System.out.println("MOVE TEMP "+(t++)+" PLUS TEMP "+(t-3)+" TEMP "+(t-2));
         System.out.println("MOVE TEMP "+(t++)+" MINUS TEMP "+(t-2)+" TEMP "+(t-5));
         System.out.println("MOVE TEMP "+(t++)+" LE TEMP "+p+" TEMP "+(t-2));
         System.out.println("CJUMP TEMP "+(t-1)+" L"+labels);
         System.out.println("MOVE TEMP "+(t++)+" PLUS TEMP "+v+" TEMP "+p);
         System.out.println("HSTORE TEMP "+(t-1)+" 0 TEMP "+z);
         System.out.println("MOVE TEMP "+(t++)+" 4");
         System.out.println("MOVE TEMP "+(t++)+" PLUS TEMP "+p+" TEMP "+(t-2));
         System.out.println("MOVE TEMP "+p+" TEMP "+(t-1));
         System.out.println("JUMP L"+l);
         System.out.println("L"+(labels++));

         ((functions)(argu)).temp=t;

         n.f4.accept(this, argu);

         String var=Integer.toString(v);
         _ret=(R)var;

         return _ret;
      }
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      if(argu==null) return _ret;

      n.f0.accept(this, argu);

      _ret=n.f1.accept(this, null);
      String name=(String)n.f1.accept(this, null);
      ms=name;

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      if(flag==1)
      {
         classes c=Symboltable.get(name);

         int t,m1,m2;

         t=((functions)(argu)).temp;
         
         m1=c.classfuncstemps.size();
         m2=c.classvarstemps.size();

         int f=Hallocate(t,4*m1,-1);
         t+=3;
         int var=Hallocate(t,4*(m2+1),-1);
         t+=3;

         Iterator it1=(c.classfuncstemps).entrySet().iterator();

         for(int i=0 ; i<m1 ; i++)
         {
            Map.Entry mapele=(Map.Entry)it1.next();
            
            System.out.println("MOVE TEMP "+t+" "+(c.classfuncs.get((String)mapele.getKey()).fclass)+"_"+mapele.getKey());
            System.out.println("HSTORE TEMP "+f+" "+(4*i)+" TEMP "+(t++));
         }

         int l=labels;
         int p=t;
         int z=t+1;
         System.out.println("MOVE TEMP "+(t++)+" 4");
         System.out.println("MOVE TEMP "+(t++)+" 0");
         System.out.println("L"+(labels++));
         System.out.println("MOVE TEMP "+(t++)+" "+(4*(m2+1)-1));
         System.out.println("MOVE TEMP "+(t++)+" LE TEMP "+p+" TEMP "+(t-2));
         System.out.println("CJUMP TEMP "+(t-1)+" L"+labels);
         System.out.println("MOVE TEMP "+(t++)+" PLUS TEMP "+var+" TEMP "+p);
         System.out.println("HSTORE TEMP "+(t-1)+" 0 TEMP "+z);
         System.out.println("MOVE TEMP "+(t++)+" 4");
         System.out.println("MOVE TEMP "+(t++)+" PLUS TEMP "+p+" TEMP "+(t-2));
         System.out.println("MOVE TEMP "+p+" TEMP "+(t-1));
         System.out.println("JUMP L"+l);
         System.out.println("L"+(labels++));

         System.out.println("HSTORE TEMP "+var+" 0 TEMP "+f);

         ((functions)(argu)).temp=t;

         String v=Integer.toString(var);
         _ret=(R)v;
      }

      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      if(argu==null)
      {
         R _ret=null;
         return _ret;
      }

      if(flag==0)
      {
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      else
      {
         R _ret=null;
         n.f0.accept(this, argu);

         String expr=(String)n.f1.accept(this, argu);

         int t=((functions)(argu)).temp;
         System.out.println("MOVE TEMP "+(t++)+" 1");
         System.out.println("MOVE TEMP "+(t++)+" MINUS TEMP "+(t-2)+" TEMP "+expr);

         ((functions)(argu)).temp=t;

         String v=Integer.toString(t-1);
         _ret=(R)v;

         return _ret;
      }
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      if(argu==null) return _ret;

      n.f0.accept(this, argu);

      _ret=n.f1.accept(this, argu);

      n.f2.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, null);
      return _ret;
   }

   public class classes
   {
      String name;
      String parent;
      LinkedHashMap <String,String> classvars=new LinkedHashMap<String,String>();
      LinkedHashMap <String,functions> classfuncs=new LinkedHashMap<String,functions>();
      LinkedHashMap <String,Integer> classvarstemps=new LinkedHashMap<String,Integer>();
      LinkedHashMap <String,Integer> classfuncstemps=new LinkedHashMap<String,Integer>();
   }

   public class functions
   {
      String name;
      String fclass;
      String ret;
      int nargs;
      int temp=0;
      int invars;
      LinkedHashMap <String,Integer> typenum=new LinkedHashMap<String,Integer>();
      LinkedHashMap <String,String> args=new LinkedHashMap<String,String>();
      LinkedHashMap <String,Integer> argstemps=new LinkedHashMap<String,Integer>();
      LinkedHashMap <String,String> funcvars=new LinkedHashMap<String,String>();
      LinkedHashMap <String,Integer> funcvarstemps=new LinkedHashMap<String,Integer>();      
   }

   public void printclasses(LinkedHashMap <String,classes> map)
   {
      Iterator it=map.entrySet().iterator();
      
      while(it.hasNext())
      {
         Map.Entry mapele=(Map.Entry)it.next();

         classes c=(classes)mapele.getValue();
         System.out.println("Class : "+mapele.getKey()+"    "+"Root : "+c.parent);

         printvars(c.classvars);
         printfuncs(c.classfuncs);
         printc(c.classfuncstemps);
      }
   }

   public void printc(LinkedHashMap <String,Integer> map)
   {
      Iterator it=map.entrySet().iterator();
      
      while(it.hasNext())
      {
         Map.Entry mapele=(Map.Entry)it.next();

         System.out.println("FUNC : "+mapele.getValue()+"    "+"VAL : "+mapele.getKey());
      }
   }

   public void printvars(LinkedHashMap <String,String> map)
   {
      Iterator it=map.entrySet().iterator();
      
      while(it.hasNext())
      {
         Map.Entry mapele=(Map.Entry)it.next();

         System.out.println("TYPE : "+mapele.getValue()+"    "+"ID : "+mapele.getKey());
      }
   }

   public void printfuncs(LinkedHashMap <String,functions> map)
   {
      Iterator it=map.entrySet().iterator();
      
      while(it.hasNext())
      {
         Map.Entry mapele=(Map.Entry)it.next();

         functions c=(functions)mapele.getValue();
         System.out.println("Function : "+mapele.getKey()+"    "+"Return type : "+c.ret);

         printvars(c.funcvars);
      }
   }

   public int Hallocate(int t , int space , int temp)
   {
      if(space!=-1) System.out.println("MOVE TEMP "+(t++)+" "+space);
      else System.out.println("MOVE TEMP "+(t++)+" TEMP "+temp);
      System.out.println("MOVE TEMP "+(t++)+" HALLOCATE TEMP "+(t-2));
      System.out.println("MOVE TEMP "+t+" TEMP "+(t-1));

      return t;
   }
}
